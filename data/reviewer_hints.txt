{'clarity': 20, 'readability': 25, 'efficiency': 30, 'optimization': 15}
- Focus on providing actionable and specific feedback that addresses multiple areas of improvement, such as clarity, readability, efficiency, and optimization. Prioritize suggestions that have a significant impact on overall quality enhancements.(Weight: 85)
- Hint: Focus on providing actionable and specific feedback that improves overall quality enhancements across different versions and types of code. This can include suggestions for clarity, readability, efficiency, and optimization. Consider using weights to prioritize areas of improvement based on their impact on the code's overall quality.(Weight: 85)
- Hint: Focus on providing actionable feedback that balances different aspects of code quality, and consider the reviewer's goal to enhance overall quality enhancements across versions and types of code.(Weight: 95)
- Strive to provide feedback that is actionable, specific, and concise, focusing on the code's clarity, readability, efficiency, and optimization. Emphasize areas for improvement without being prescriptive, and use scores to quantify your points of emphasis.(Weight: 95)
- Hint: Focus on providing feedback that is applicable to multiple rounds of review and enhances clarity, readability, efficiency, or optimization in the code without referencing any specific instance. Consider suggesting improvements that could be made to the code's overall quality rather than focusing on minor issues.(Weight: 95)
- Focus on providing actionable and specific feedback that directly addresses the code's clarity, readability, efficiency, and optimization. Avoid generic comments or suggestions. Instead, use concrete examples to illustrate your points and provide a clear call to action for the developer.(Weight: 90)
- Focus on providing actionable and specific feedback that addresses the code's overall quality enhancements. Be clear about what improvements are suggested, and prioritize these over minor details or edge cases.(Weight: 95)